#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
"""

import asyncio
import json
from aiobotocore.session import get_session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ S3 (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π MinIO)
S3_CONFIG = {
    "endpoint_url": "http://localhost:9000",
    "region_name": "us-east-1",
    "aws_access_key_id": "minioadmin",
    "aws_secret_access_key": "minioadmin123"
}

bucket_name = "cinema-files"


async def list_s3_objects():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ S3 bucket"""
    session = get_session()
    async with session.create_client("s3", **S3_CONFIG) as s3:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            response = await s3.list_objects_v2(Bucket=bucket_name)
            
            if 'Contents' not in response:
                print("‚ùå Bucket –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            objects = response['Contents']
            total_size = sum(obj['Size'] for obj in objects)
            
            print(f"üìä Bucket: {bucket_name}")
            print(f"üìä –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}")
            print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / (1024*1024):.2f} MB")
            print("=" * 60)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∏–ª—å–º–∞–º
            movies = {}
            for obj in objects:
                key = obj['Key']
                if key.startswith('movies/'):
                    parts = key.split('/')
                    if len(parts) >= 3:
                        movie_id = parts[1]
                        file_type = parts[2]
                        
                        if movie_id not in movies:
                            movies[movie_id] = {}
                        
                        movies[movie_id][file_type] = {
                            'size': obj['Size'],
                            'modified': obj['LastModified']
                        }
            
            print(f"üé¨ –ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(movies)}")
            print("\nüìù –ü—Ä–∏–º–µ—Ä—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∏–ª—å–º–æ–≤
            for i, (movie_id, files) in enumerate(list(movies.items())[:10]):
                print(f"\nüé¨ Movie ID: {movie_id}")
                for file_type, info in files.items():
                    print(f"  - {file_type}: {info['size']} bytes")
            
            if len(movies) > 10:
                print(f"\n... –∏ –µ—â–µ {len(movies) - 10} —Ñ–∏–ª—å–º–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤: {e}")


async def get_sample_metadata():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞"""
    session = get_session()
    async with session.create_client("s3", **S3_CONFIG) as s3:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞
            metadata_key = "movies/1/metadata.json"
            response = await s3.get_object(Bucket=bucket_name, Key=metadata_key)
            content = await response['Body'].read()
            metadata = json.loads(content.decode('utf-8'))
            
            print("\nüìÑ –ü—Ä–∏–º–µ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (Movie ID: 1):")
            print("=" * 40)
            print(json.dumps(metadata, ensure_ascii=False, indent=2))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")


async def get_sample_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä info —Ñ–∞–π–ª–∞"""
    session = get_session()
    async with session.create_client("s3", **S3_CONFIG) as s3:
        try:
            # –ü–æ–ª—É—á–∞–µ–º info —Ñ–∞–π–ª –ø–µ—Ä–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞
            info_key = "movies/1/info.txt"
            response = await s3.get_object(Bucket=bucket_name, Key=info_key)
            content = await response['Body'].read()
            info_text = content.decode('utf-8')
            
            print("\nüìÑ –ü—Ä–∏–º–µ—Ä info —Ñ–∞–π–ª–∞ (Movie ID: 1):")
            print("=" * 40)
            print(info_text)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ info —Ñ–∞–π–ª–∞: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
    print("=" * 50)
    
    await list_s3_objects()
    await get_sample_metadata()
    await get_sample_info()
    
    print(f"\nüåê MinIO Console: http://localhost:9001")
    print(f"üåê MinIO API: http://localhost:9000")
    print(f"üîë –õ–æ–≥–∏–Ω: minioadmin / minioadmin123")


if __name__ == "__main__":
    asyncio.run(main()) 