#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)
"""

import asyncio
from aiobotocore.session import get_session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ S3 (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π MinIO)
S3_CONFIG = {
    "endpoint_url": "http://localhost:9000",
    "region_name": "us-east-1",
    "aws_access_key_id": "minioadmin",
    "aws_secret_access_key": "minioadmin123"
}

bucket_name = "cinema-files"


async def clear_s3_bucket():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ S3 bucket"""
    session = get_session()
    async with session.create_client("s3", **S3_CONFIG) as s3:
        try:
            print(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É bucket: {bucket_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            response = await s3.list_objects_v2(Bucket=bucket_name)
            
            if 'Contents' not in response:
                print("‚úÖ Bucket —É–∂–µ –ø—É—Å—Ç–æ–π")
                return
            
            objects = response['Contents']
            total_objects = len(objects)
            total_size = sum(obj['Size'] for obj in objects)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {total_objects}")
            print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / (1024*1024):.2f} MB")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            print(f"\nüöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ {total_objects} –æ–±—ä–µ–∫—Ç–æ–≤...")
            
            # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –±–∞—Ç—á–∞–º–∏ (–º–∞–∫—Å–∏–º—É–º 1000 –∑–∞ —Ä–∞–∑)
            deleted_count = 0
            batch_size = 1000
            
            for i in range(0, total_objects, batch_size):
                batch = objects[i:i + batch_size]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                delete_objects = {
                    'Objects': [{'Key': obj['Key']} for obj in batch]
                }
                
                # –£–¥–∞–ª—è–µ–º –±–∞—Ç—á
                delete_response = await s3.delete_objects(
                    Bucket=bucket_name,
                    Delete=delete_objects
                )
                
                batch_deleted = len(delete_response.get('Deleted', []))
                deleted_count += batch_deleted
                
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {deleted_count}/{total_objects} –æ–±—ä–µ–∫—Ç–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
                if 'Errors' in delete_response:
                    for error in delete_response['Errors']:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {error['Key']}: {error['Message']}")
            
            print(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìä –£–¥–∞–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {deleted_count}")
            print(f"üìä –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {total_size / (1024*1024):.2f} MB")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ bucket: {e}")


async def verify_empty():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ bucket –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–æ–π"""
    session = get_session()
    async with session.create_client("s3", **S3_CONFIG) as s3:
        try:
            response = await s3.list_objects_v2(Bucket=bucket_name)
            
            if 'Contents' not in response:
                print("‚úÖ Bucket –ø—É—Å—Ç–æ–π - –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                remaining = len(response['Contents'])
                print(f"‚ö†Ô∏è –í bucket –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –æ–±—ä–µ–∫—Ç–æ–≤")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ bucket: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üóëÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
    print("=" * 50)
    
    await clear_s3_bucket()
    await verify_empty()
    
    print(f"\nüåê MinIO Console: http://localhost:9001")
    print(f"üåê MinIO API: http://localhost:9000")
    print(f"üîë –õ–æ–≥–∏–Ω: minioadmin / minioadmin123")


if __name__ == "__main__":
    asyncio.run(main()) 