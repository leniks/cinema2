import axios from 'axios'
import { Film } from '../interfaces'
import { API_URL, AUTH_URL } from '../config/api.config'

// const POSTER_CACHE_PREFIX = 'movie_poster_'
// const POSTER_CACHE_EXPIRY = 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞

// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã axios –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const mainApi = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
})

const authApi = axios.create({
  baseURL: AUTH_URL,
  headers: {
    'Content-Type': 'application/json',
  },
})

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è JWT (–¥–ª—è –æ–±–æ–∏—Ö API)
const addAuthInterceptor = (apiInstance: any) => {
  apiInstance.interceptors.request.use(
    (config: any) => {
      const token = localStorage.getItem('token')
      if (token) {
        config.headers.Authorization = `Bearer ${token}`
      }
      return config
    },
    (error: any) => {
      return Promise.reject(error)
    },
  )

  apiInstance.interceptors.response.use(
    (response: any) => {
      console.log(`‚ú® API Response [${response.config.url}]:`, {
        status: response.status,
        data: response.data,
        headers: response.headers,
      })
      return response
    },
    (error: any) => {
      console.error(`üî• API Error [${error.config?.url}]:`, {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
      })

      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (error.response?.status === 401) {
        console.log('üîí –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥...')
        localStorage.removeItem('token')
        window.location.href = '/login'
      }

      return Promise.reject(error)
    },
  )
}

addAuthInterceptor(mainApi)
addAuthInterceptor(authApi)

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–µ—à–µ–º –ø–æ—Å—Ç–µ—Ä–æ–≤ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
// const getPosterFromCache = (url: string): string | null => {
//   try {
//     const cacheKey = POSTER_CACHE_PREFIX + btoa(url)
//     const cached = localStorage.getItem(cacheKey)
//     if (!cached) return null

//     const { data, timestamp } = JSON.parse(cached)
//     if (Date.now() - timestamp > POSTER_CACHE_EXPIRY) {
//       localStorage.removeItem(cacheKey)
//       return null
//     }

//     return data
//   } catch (error) {
//     console.error('Error reading from poster cache:', error)
//     return null
//   }
// }

// –§—É–Ω–∫—Ü–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–µ—Ä–æ–≤ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è)
// const cachePoster = async (url: string): Promise<string> => {
//   try {
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
//     const cached = getPosterFromCache(url)
//     if (cached) return cached

//     // –î–ª—è S3 URL –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º no-cors
//     if (url.includes('s3.timeweb.cloud')) {
//       return url // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è S3
//     }

//     // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö URL –ø—Ä–æ–±—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å
//     try {
//       const response = await fetch(url)
//       const blob = await response.blob()
//       const reader = new FileReader()

//       return new Promise((resolve, reject) => {
//         reader.onloadend = () => {
//           try {
//             const base64data = reader.result as string
//             const cacheKey = POSTER_CACHE_PREFIX + btoa(url)
//             localStorage.setItem(
//               cacheKey,
//               JSON.stringify({
//                 data: base64data,
//                 timestamp: Date.now(),
//               }),
//             )
//             resolve(base64data)
//           } catch (error) {
//             console.error('Error caching poster:', error)
//             resolve(url) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
//           }
//         }
//         reader.onerror = reject
//         reader.readAsDataURL(blob)
//       })
//     } catch (error) {
//       console.error('Error caching poster:', error)
//       return url // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
//     }
//   } catch (error) {
//     console.error('Error in cachePoster:', error)
//     return url // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
//   }
// }

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –±–µ–∫–µ–Ω–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç Film
const convertBackendMovieToFilm = (movie: any): Film => {
  // –ï—Å–ª–∏ –µ—Å—Ç—å poster_url –∏–∑ S3, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback
  let posterUrl = movie.poster_url
  if (!posterUrl) {
    posterUrl = `http://localhost:9000/cinema-files/movies/${movie.id}/poster.svg`
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å trailer_url (backdrop) –∏–∑ S3, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback
  let backdropUrl = movie.trailer_url
  if (!backdropUrl) {
    backdropUrl = `http://localhost:9000/cinema-files/movies/${movie.id}/backdrop.jpg`
  }

  return {
    movie_id: movie.id,
    title: movie.title || '',
    description: movie.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
    release_date: movie.release_date || '',
    rating: movie.rating || 0,
    poster_url: posterUrl,
    backdrop_url: backdropUrl,
    video_url: movie.movie_url || '',
    duration: movie.duration || 0,
    genres: [], // –í –Ω–æ–≤–æ–º –±–µ–∫–µ–Ω–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∂–∞–Ω—Ä–æ–≤ –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å–º–æ–≤
async function processMovies(movies: any[]): Promise<Film[]> {
  if (!movies || !Array.isArray(movies)) {
    console.warn('Invalid movies data:', movies)
    return []
  }

  return movies.map(convertBackendMovieToFilm)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è)
// const decodeJWT = (token: string): any => {
//   try {
//     const base64Url = token.split('.')[1]
//     const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')
//     const jsonPayload = decodeURIComponent(
//       atob(base64)
//         .split('')
//         .map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
//         .join(''),
//     )
//     return JSON.parse(jsonPayload)
//   } catch (error) {
//     console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JWT:', error)
//     return null
//   }
// }

interface LoginResponse {
  access_token: string
  user_type?: string
  username?: string
  user_id?: number
}

export const MovieService = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
  async getMovies(page: number = 1, size: number = 50) {
    try {
      const response = await mainApi.get<any[]>('/movies/', {
        params: { page, size },
      })
      const movies = await processMovies(response.data)

      // –î–ª—è –ø–µ—Ä–≤—ã—Ö 10 —Ñ–∏–ª—å–º–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å backdrop_url
      const moviesWithBackdrop = await Promise.all(
        movies.slice(0, 10).map(async (movie) => {
          try {
            const detailedMovie = await this.getMovie(movie.movie_id)
            return detailedMovie || movie
          } catch (error) {
            console.error(
              `Error loading details for movie ${movie.movie_id}:`,
              error,
            )
            return movie
          }
        }),
      )

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∏–ª—å–º—ã —Å backdrop'–∞–º–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
      return [...moviesWithBackdrop, ...movies.slice(10)]
    } catch (error) {
      console.error('‚ùå Error fetching movies:', error)
      return []
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∏–ª—å–º–µ
  async getMovie(movieId: number): Promise<Film | null> {
    try {
      const response = await mainApi.get<any>(`/movies/${movieId}`)
      if (response.data.message) {
        // –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω
        return null
      }
      return convertBackendMovieToFilm(response.data)
    } catch (error) {
      console.error('‚ùå Error fetching movie:', error)
      return null
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤)
  async getRecommendations(count: number = 10) {
    try {
      console.warn(
        '‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –Ω–æ–≤–æ–º –±–µ–∫–µ–Ω–¥–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø —Ñ–∏–ª—å–º—ã',
      )
      return await this.getTopRated()
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error)
      return []
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞
  async getTopRated() {
    try {
      const response = await mainApi.get<any[]>('/movies/')
      const movies = await processMovies(response.data)
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 12
      return movies
        .sort((a, b) => (b.rating || 0) - (a.rating || 0))
        .slice(0, 12)
    } catch (error) {
      console.error('‚ùå Error fetching top rated movies:', error)
      return []
    }
  },

  // –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
  async searchMovies(query: string) {
    try {
      console.log('Searching for:', query)

      if (!query || typeof query !== 'string') {
        console.warn('Invalid search query:', query)
        return []
      }

      const trimmedQuery = query.trim().toLowerCase()
      if (!trimmedQuery) {
        return []
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å–º—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–∞ –±–µ–∫–µ–Ω–¥–µ
      const response = await mainApi.get<any[]>('/movies/')
      const allMovies = await processMovies(response.data)

      // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const filteredMovies = allMovies.filter((movie) =>
        movie.title.toLowerCase().includes(trimmedQuery),
      )

      console.log('Search results:', filteredMovies)
      return filteredMovies
    } catch (error) {
      console.error('‚ùå Error searching movies:', error)
      return []
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤
  async getSimilarMovies(movieId: number) {
    try {
      const response = await mainApi.get<any[]>(`/movies/${movieId}/similar`)
      const movies = await processMovies(response.data)
      return movies.slice(0, 12) // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 12 –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤
    } catch (error) {
      console.error('‚ùå Error fetching similar movies:', error)
      return []
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
  getStreamUrl(movieId: string): string {
    return `${API_URL}/streaming/${movieId}`
  },

  // –ü—Ä–µ–ª–æ–∞–¥–∏–Ω–≥ —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤
  async preloadTopMovies() {
    try {
      const response = await mainApi.get<any[]>('/movies/')
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
      processMovies(response.data).catch(console.error)
    } catch (error) {
      console.error('‚ùå Error preloading top movies:', error)
    }
  },

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async login(username: string, password: string): Promise<LoginResponse> {
    const response = await authApi.post('/auth/login', {
      username,
      password,
    })
    return response.data
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
  async addMovie(formData: FormData) {
    try {
      console.warn('‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –Ω–æ–≤–æ–º –±–µ–∫–µ–Ω–¥–µ')
      throw new Error('–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞')
    } catch (error: any) {
      console.error('‚ùå Error adding movie:', error)
      throw error
    }
  },

  // –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ Elasticsearch (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
  async elasticSearch(query: string, limit: number = 10) {
    try {
      console.warn('‚ö†Ô∏è Elasticsearch –ø–æ–∏—Å–∫ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–æ–≤–æ–º –±–µ–∫–µ–Ω–¥–µ')
      return await this.searchMovies(query)
    } catch (error) {
      console.error('‚ùå Error searching movies with Elasticsearch:', error)
      return []
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  async getAllMovies(page: number = 1, size: number = 24) {
    try {
      const response = await mainApi.get<any[]>('/movies/', {
        params: { page, size },
      })

      if (!response.data) {
        console.warn('Empty response data')
        return { movies: [], total: 0 }
      }

      const movies = await processMovies(response.data)

      return {
        movies,
        total: movies.length, // TODO: –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –±–µ–∫–µ–Ω–¥–∞
      }
    } catch (error) {
      console.error('‚ùå Error fetching all movies:', error)
      return { movies: [], total: 0 }
    }
  },
}
